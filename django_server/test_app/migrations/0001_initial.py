# Generated by Django 3.0.4 on 2020-04-16 14:30

import datetime
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='MyUser',
            fields=[
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('user_id', models.AutoField(db_column='userId', primary_key=True, serialize=False)),
                ('username', models.CharField(max_length=20, unique=True)),
                ('password', models.CharField(db_column='userPassword', max_length=256)),
                ('first_name', models.CharField(db_column='firstName', max_length=25)),
                ('last_name', models.CharField(db_column='lastName', max_length=25)),
                ('email', models.EmailField(max_length=100, unique=True, verbose_name='email')),
                ('last_access', models.DateField(db_column='lastAccess', default=datetime.date.today)),
                ('creation_date', models.DateTimeField(db_column='creationDate', default=django.utils.timezone.now)),
                ('last_update', models.DateField(db_column='lastUpdate', default=datetime.date.today)),
                ('user_type', models.IntegerField(choices=[(0, 'admin'), (100, 'monitor'), (200, 'atRisk'), (201, 'helper'), (256, 'unspecified')], db_column='userType')),
                ('is_staff', models.BooleanField(db_column='isStaff', default=False)),
                ('is_active', models.BooleanField(db_column='activeStatus', default=True)),
            ],
            options={
                'db_table': 'user_entity',
            },
        ),
        migrations.CreateModel(
            name='Ad',
            fields=[
                ('ad_id', models.CharField(db_column='adId', max_length=36, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=30)),
                ('content', models.CharField(blank=True, max_length=280, null=True)),
                ('creation_date', models.DateField(db_column='creationDate')),
                ('last_update', models.DateTimeField(db_column='lastUpdate')),
                ('helper_id', models.ForeignKey(db_column='helperId', limit_choices_to={'user_type': 201}, on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'ad',
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('category_id', models.CharField(db_column='categoryId', max_length=36, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=30)),
                ('category_description', models.CharField(blank=True, db_column='categoryDescription', max_length=280, null=True)),
            ],
            options={
                'db_table': 'category',
            },
        ),
        migrations.CreateModel(
            name='Credential',
            fields=[
                ('credential_id', models.CharField(db_column='credentialId', max_length=36, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=30)),
                ('date_obtained', models.DateField(db_column='dateObtained')),
                ('expiration_date', models.DateField(blank=True, db_column='expirationDate', null=True)),
                ('institution', models.CharField(max_length=50)),
                ('verified', models.IntegerField()),
            ],
            options={
                'db_table': 'credential',
            },
        ),
        migrations.CreateModel(
            name='NoteType',
            fields=[
                ('note_type_id', models.IntegerField(db_column='noteTypeId', primary_key=True, serialize=False)),
                ('note_type', models.CharField(db_column='noteType', max_length=9)),
            ],
            options={
                'db_table': 'note_type',
            },
        ),
        migrations.CreateModel(
            name='PdfType',
            fields=[
                ('pdf_type_id', models.IntegerField(db_column='pdfTypeId', primary_key=True, serialize=False)),
                ('pdf_type', models.CharField(db_column='pdfType', max_length=15)),
            ],
            options={
                'db_table': 'pdf_type',
            },
        ),
        migrations.CreateModel(
            name='Request',
            fields=[
                ('request_id', models.CharField(db_column='requestId', max_length=36, primary_key=True, serialize=False)),
                ('date_created', models.DateField(db_column='dateCreated')),
                ('periodicity', models.PositiveIntegerField(blank=True, null=True)),
                ('title', models.CharField(max_length=30)),
                ('request_description', models.CharField(blank=True, db_column='requestDescription', max_length=280, null=True)),
                ('expiration_date', models.DateField(blank=True, db_column='expirationDate', null=True)),
                ('done', models.IntegerField(blank=True, null=True)),
                ('atrisk', models.ForeignKey(limit_choices_to={'user_type': 200}, on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
                ('helper', models.ForeignKey(limit_choices_to={'user_type': 201}, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'request',
            },
        ),
        migrations.CreateModel(
            name='HealthLog',
            fields=[
                ('patient_id', models.OneToOneField(db_column='userId', limit_choices_to={'user_type': 201}, on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('monitor_id', models.ForeignKey(db_column='monitorId', limit_choices_to={'user_type': 100}, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'health_log',
            },
        ),
        migrations.CreateModel(
            name='Image',
            fields=[
                ('user_id', models.OneToOneField(db_column='userId', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('title', models.CharField(blank=True, max_length=40, null=True)),
                ('pic', models.TextField()),
            ],
            options={
                'db_table': 'image',
            },
        ),
        migrations.CreateModel(
            name='SocialMedia',
            fields=[
                ('user_id', models.OneToOneField(db_column='userId', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, related_name='+', serialize=False, to=settings.AUTH_USER_MODEL)),
                ('facebook', models.CharField(blank=True, max_length=50, null=True)),
                ('linkedin', models.CharField(blank=True, db_column='linkedIn', max_length=61, null=True)),
                ('instagram', models.CharField(blank=True, max_length=30, null=True)),
                ('reddit', models.CharField(blank=True, max_length=20, null=True)),
                ('skype', models.CharField(blank=True, max_length=32, null=True)),
                ('twitter', models.CharField(blank=True, max_length=15, null=True)),
                ('last_update', models.DateTimeField(blank=True, db_column='lastUpdate', null=True)),
            ],
            options={
                'db_table': 'social_media',
            },
        ),
        migrations.CreateModel(
            name='UserLog',
            fields=[
                ('log_id', models.CharField(db_column='logId', max_length=36, primary_key=True, serialize=False)),
                ('ip', models.CharField(blank=True, max_length=15, null=True)),
                ('host_name', models.CharField(blank=True, db_column='hostName', max_length=20, null=True)),
                ('isp', models.CharField(blank=True, max_length=20, null=True)),
                ('district', models.CharField(blank=True, max_length=30, null=True)),
                ('city', models.CharField(blank=True, max_length=50, null=True)),
                ('zip_code', models.PositiveIntegerField(blank=True, db_column='zipCode', null=True)),
                ('lat', models.DecimalField(blank=True, decimal_places=6, max_digits=7, null=True)),
                ('lng', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True)),
                ('log_date', models.DateTimeField(blank=True, db_column='logDate', null=True)),
                ('user_id', models.ForeignKey(db_column='userId', on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_log',
            },
        ),
        migrations.CreateModel(
            name='SubCategory',
            fields=[
                ('subcategory_id', models.CharField(db_column='subCategoryId', max_length=36, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=30)),
                ('subcategory_description', models.CharField(blank=True, db_column='subCategoryDescription', max_length=280, null=True)),
                ('category_id', models.ForeignKey(db_column='categoryId', on_delete=django.db.models.deletion.DO_NOTHING, to='test_app.Category')),
            ],
            options={
                'db_table': 'sub_category',
            },
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('review_id', models.CharField(db_column='reviewId', max_length=36, primary_key=True, serialize=False)),
                ('reviewing_id', models.CharField(db_column='reviewingId', max_length=36)),
                ('reviewed_id', models.CharField(db_column='reviewedId', max_length=36)),
                ('review_description', models.CharField(blank=True, db_column='reviewDescription', max_length=280, null=True)),
                ('rating', models.PositiveIntegerField(blank=True, null=True)),
                ('last_update', models.DateTimeField(blank=True, db_column='lastUpdate', null=True)),
                ('request_id', models.ForeignKey(db_column='requestId', on_delete=django.db.models.deletion.DO_NOTHING, to='test_app.Request')),
            ],
            options={
                'db_table': 'review',
            },
        ),
        migrations.CreateModel(
            name='Pdf',
            fields=[
                ('pdf_id', models.CharField(db_column='pdfId', max_length=36, primary_key=True, serialize=False)),
                ('upload_time', models.DateTimeField(db_column='uploadTime')),
                ('title', models.CharField(max_length=30)),
                ('pdf_file', models.CharField(blank=True, db_column='pdfFile', max_length=256, null=True)),
                ('pdftype', models.ForeignKey(db_column='pdfType', on_delete=django.db.models.deletion.DO_NOTHING, to='test_app.PdfType')),
            ],
            options={
                'db_table': 'pdf',
            },
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('payment_id', models.CharField(db_column='paymentId', max_length=36, primary_key=True, serialize=False)),
                ('payment_value', models.DecimalField(db_column='paymentValue', decimal_places=2, max_digits=6)),
                ('payment_date_time', models.DateTimeField(db_column='paymentDateTime')),
                ('method', models.CharField(max_length=6)),
                ('origin_iban', models.CharField(db_column='originIBAN', max_length=25)),
                ('destination_iban', models.CharField(db_column='destinationIBAN', max_length=25)),
                ('approved', models.IntegerField()),
                ('subsidised', models.IntegerField()),
                ('request_id', models.ForeignKey(db_column='requestId', on_delete=django.db.models.deletion.DO_NOTHING, to='test_app.Request')),
            ],
            options={
                'db_table': 'payment',
            },
        ),
        migrations.CreateModel(
            name='Note',
            fields=[
                ('note_id', models.CharField(db_column='noteId', max_length=36, primary_key=True, serialize=False)),
                ('creation_date', models.DateField(db_column='creationDate')),
                ('last_update', models.DateTimeField(db_column='lastUpdate')),
                ('title', models.CharField(max_length=30)),
                ('content', models.CharField(blank=True, max_length=400, null=True)),
                ('author_id', models.ForeignKey(db_column='authorId', on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
                ('note_type', models.ForeignKey(db_column='noteType', on_delete=django.db.models.deletion.DO_NOTHING, to='test_app.NoteType')),
            ],
            options={
                'db_table': 'note',
            },
        ),
        migrations.CreateModel(
            name='Address',
            fields=[
                ('address_id', models.CharField(db_column='addressId', max_length=36, primary_key=True, serialize=False)),
                ('address', models.CharField(max_length=100)),
                ('city', models.CharField(blank=True, max_length=50, null=True)),
                ('district', models.CharField(blank=True, max_length=30, null=True)),
                ('zip_code', models.PositiveIntegerField(blank=True, db_column='zipCode', null=True)),
                ('last_update', models.DateTimeField(db_column='lastUpdate')),
                ('verified', models.IntegerField()),
                ('user_id', models.ForeignKey(db_column='userId', on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'address',
            },
        ),
        migrations.CreateModel(
            name='UserNote',
            fields=[
                ('user_note_id', models.OneToOneField(db_column='userNoteId', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, related_name='+', serialize=False, to='test_app.Note')),
                ('note_type', models.ForeignKey(blank=True, db_column='noteType', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='test_app.Note')),
                ('user_id', models.ForeignKey(db_column='userId', on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_note',
            },
        ),
        migrations.CreateModel(
            name='PaymentProof',
            fields=[
                ('pdf_id', models.OneToOneField(db_column='pdfId', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, related_name='+', serialize=False, to='test_app.Pdf')),
                ('payment_id', models.ForeignKey(db_column='paymentId', on_delete=django.db.models.deletion.DO_NOTHING, to='test_app.Payment')),
                ('pdf_type', models.ForeignKey(blank=True, db_column='pdfType', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='test_app.Pdf')),
            ],
            options={
                'db_table': 'payment_proof',
            },
        ),
        migrations.CreateModel(
            name='LogNote',
            fields=[
                ('log_note_id', models.OneToOneField(db_column='logNoteId', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, related_name='+', serialize=False, to='test_app.Note')),
                ('log_id', models.ForeignKey(db_column='logId', on_delete=django.db.models.deletion.DO_NOTHING, to='test_app.UserLog')),
                ('note_type', models.ForeignKey(blank=True, db_column='noteType', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='test_app.Note')),
            ],
            options={
                'db_table': 'log_note',
            },
        ),
        migrations.CreateModel(
            name='HealthLogNote',
            fields=[
                ('health_log_note_id', models.OneToOneField(db_column='healthLogNoteId', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, related_name='+', serialize=False, to='test_app.Note')),
                ('health_log_id', models.ForeignKey(db_column='healthLogId', on_delete=django.db.models.deletion.DO_NOTHING, to='test_app.HealthLog')),
                ('note_type', models.ForeignKey(blank=True, db_column='noteType', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='test_app.Note')),
            ],
            options={
                'db_table': 'health_log_note',
            },
        ),
        migrations.CreateModel(
            name='CredentialProof',
            fields=[
                ('pdf_id', models.OneToOneField(db_column='pdfId', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, related_name='+', serialize=False, to='test_app.Pdf')),
                ('credential_id', models.ForeignKey(db_column='credentialId', on_delete=django.db.models.deletion.DO_NOTHING, to='test_app.Credential')),
                ('pdf_type', models.ForeignKey(blank=True, db_column='pdfType', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='test_app.Pdf')),
            ],
            options={
                'db_table': 'credential_proof',
            },
        ),
        migrations.CreateModel(
            name='AddressProof',
            fields=[
                ('pdf_id', models.OneToOneField(db_column='pdfId', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, related_name='+', serialize=False, to='test_app.Pdf')),
                ('address_id', models.ForeignKey(db_column='addressId', on_delete=django.db.models.deletion.DO_NOTHING, to='test_app.Address')),
                ('pdf_type', models.ForeignKey(blank=True, db_column='pdfType', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='test_app.Pdf')),
            ],
            options={
                'db_table': 'address_proof',
            },
        ),
        migrations.CreateModel(
            name='RequestCategory',
            fields=[
                ('request_id', models.OneToOneField(db_column='requestId', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='test_app.Request')),
                ('subcategory_id', models.ForeignKey(db_column='subCategoryId', on_delete=django.db.models.deletion.DO_NOTHING, to='test_app.SubCategory')),
            ],
            options={
                'db_table': 'request_category',
                'unique_together': {('request_id', 'subcategory_id')},
            },
        ),
        migrations.CreateModel(
            name='HelpersFavourite',
            fields=[
                ('helper_id', models.OneToOneField(db_column='helperId', limit_choices_to={'user_type': 201}, on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('date_selected', models.DateField(blank=True, db_column='dateSelected', null=True)),
                ('atrisk_id', models.ForeignKey(db_column='atRiskId', limit_choices_to={'user_type': 200}, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'helpers_favourite',
                'unique_together': {('helper_id', 'atrisk_id')},
            },
        ),
        migrations.CreateModel(
            name='HelperCategory',
            fields=[
                ('helper_id', models.OneToOneField(db_column='helperId', limit_choices_to={'user_type': 201}, on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('subcategory_id', models.ForeignKey(db_column='subCategoryId', on_delete=django.db.models.deletion.DO_NOTHING, to='test_app.SubCategory')),
            ],
            options={
                'db_table': 'helper_category',
                'unique_together': {('helper_id', 'subcategory_id')},
            },
        ),
        migrations.CreateModel(
            name='AtRisksFavourite',
            fields=[
                ('atrisk_id', models.OneToOneField(db_column='atRiskId', limit_choices_to={'user_type': 200}, on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('date_selected', models.DateField(blank=True, db_column='dateSelected', null=True)),
                ('helper_id', models.ForeignKey(db_column='helperId', limit_choices_to={'user_type': 201}, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'at_risks_favourite',
                'unique_together': {('atrisk_id', 'helper_id')},
            },
        ),
        migrations.CreateModel(
            name='AtRiskCategory',
            fields=[
                ('atrisk_id', models.OneToOneField(db_column='atRiskId', limit_choices_to={'user_type': 200}, on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('subcategory_id', models.ForeignKey(db_column='subCategoryId', on_delete=django.db.models.deletion.DO_NOTHING, to='test_app.SubCategory')),
            ],
            options={
                'db_table': 'at_risk_category',
                'unique_together': {('atrisk_id', 'subcategory_id')},
            },
        ),
        migrations.CreateModel(
            name='AdCategory',
            fields=[
                ('ad_id', models.OneToOneField(db_column='adId', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='test_app.Ad')),
                ('subcategory_id', models.ForeignKey(db_column='subCategoryId', on_delete=django.db.models.deletion.DO_NOTHING, to='test_app.SubCategory')),
            ],
            options={
                'db_table': 'ad_category',
                'unique_together': {('ad_id', 'subcategory_id')},
            },
        ),
    ]
