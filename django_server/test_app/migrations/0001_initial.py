# Generated by Django 3.0.4 on 2020-04-11 18:33

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Ad',
            fields=[
                ('adid', models.CharField(db_column='adId', max_length=36, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=30)),
                ('content', models.CharField(blank=True, max_length=280, null=True)),
                ('creationdate', models.DateField(db_column='creationDate')),
                ('lastupdate', models.DateTimeField(db_column='lastUpdate')),
            ],
            options={
                'db_table': 'ad',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Address',
            fields=[
                ('addressid', models.CharField(db_column='addressId', max_length=36, primary_key=True, serialize=False)),
                ('address', models.CharField(max_length=100)),
                ('city', models.CharField(blank=True, max_length=50, null=True)),
                ('district', models.CharField(blank=True, max_length=30, null=True)),
                ('zipcode', models.PositiveIntegerField(blank=True, db_column='zipCode', null=True)),
                ('lastupdate', models.DateTimeField(db_column='lastUpdate')),
                ('verified', models.IntegerField()),
            ],
            options={
                'db_table': 'address',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, unique=True)),
            ],
            options={
                'db_table': 'auth_group',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthGroupPermissions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'auth_group_permissions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthPermission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('codename', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'auth_permission',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128)),
                ('last_login', models.DateTimeField(blank=True, null=True)),
                ('is_superuser', models.IntegerField()),
                ('username', models.CharField(max_length=150, unique=True)),
                ('first_name', models.CharField(max_length=30)),
                ('last_name', models.CharField(max_length=150)),
                ('email', models.CharField(max_length=254)),
                ('is_staff', models.IntegerField()),
                ('is_active', models.IntegerField()),
                ('date_joined', models.DateTimeField()),
            ],
            options={
                'db_table': 'auth_user',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUserGroups',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'auth_user_groups',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUserUserPermissions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'auth_user_user_permissions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('categoryid', models.CharField(db_column='categoryId', max_length=36, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=30)),
                ('categorydescription', models.CharField(blank=True, db_column='categoryDescription', max_length=280, null=True)),
            ],
            options={
                'db_table': 'category',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Credential',
            fields=[
                ('credentialid', models.CharField(db_column='credentialId', max_length=36, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=30)),
                ('dateobtained', models.DateField(db_column='dateObtained')),
                ('expirationdate', models.DateField(blank=True, db_column='expirationDate', null=True)),
                ('institution', models.CharField(max_length=50)),
                ('verified', models.IntegerField()),
            ],
            options={
                'db_table': 'credential',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoAdminLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action_time', models.DateTimeField()),
                ('object_id', models.TextField(blank=True, null=True)),
                ('object_repr', models.CharField(max_length=200)),
                ('action_flag', models.PositiveSmallIntegerField()),
                ('change_message', models.TextField()),
            ],
            options={
                'db_table': 'django_admin_log',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoContentType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('app_label', models.CharField(max_length=100)),
                ('model', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'django_content_type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoMigrations',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('app', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255)),
                ('applied', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_migrations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoSession',
            fields=[
                ('session_key', models.CharField(max_length=40, primary_key=True, serialize=False)),
                ('session_data', models.TextField()),
                ('expire_date', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_session',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ExecutiveType',
            fields=[
                ('executivetypeid', models.IntegerField(db_column='executiveTypeId', primary_key=True, serialize=False)),
                ('executivetype', models.CharField(db_column='executiveType', max_length=7)),
            ],
            options={
                'db_table': 'executive_type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='NormalType',
            fields=[
                ('normaltypeid', models.IntegerField(db_column='normalTypeId', primary_key=True, serialize=False)),
                ('normaltype', models.CharField(db_column='normalType', max_length=7)),
            ],
            options={
                'db_table': 'normal_type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Note',
            fields=[
                ('noteid', models.CharField(db_column='noteId', max_length=36, primary_key=True, serialize=False)),
                ('creationdate', models.DateField(db_column='creationDate')),
                ('lastupdate', models.DateTimeField(db_column='lastUpdate')),
                ('title', models.CharField(max_length=30)),
                ('content', models.CharField(blank=True, max_length=400, null=True)),
            ],
            options={
                'db_table': 'note',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='NoteType',
            fields=[
                ('notetypeid', models.IntegerField(db_column='noteTypeId', primary_key=True, serialize=False)),
                ('notetype', models.CharField(db_column='noteType', max_length=9)),
            ],
            options={
                'db_table': 'note_type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('paymentid', models.CharField(db_column='paymentId', max_length=36, primary_key=True, serialize=False)),
                ('paymentvalue', models.DecimalField(db_column='paymentValue', decimal_places=2, max_digits=6)),
                ('paymentdatetime', models.DateTimeField(db_column='paymentDateTime')),
                ('method', models.CharField(max_length=6)),
                ('originiban', models.CharField(db_column='originIBAN', max_length=25)),
                ('destinationiban', models.CharField(db_column='destinationIBAN', max_length=25)),
                ('approved', models.IntegerField()),
                ('subsidised', models.IntegerField()),
            ],
            options={
                'db_table': 'payment',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Pdf',
            fields=[
                ('pdfid', models.CharField(db_column='pdfId', max_length=36, primary_key=True, serialize=False)),
                ('uploadtime', models.DateTimeField(db_column='uploadTime')),
                ('title', models.CharField(max_length=30)),
                ('pdffile', models.CharField(blank=True, db_column='pdfFile', max_length=256, null=True)),
            ],
            options={
                'db_table': 'pdf',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='PdfType',
            fields=[
                ('pdftypeid', models.IntegerField(db_column='pdfTypeId', primary_key=True, serialize=False)),
                ('pdftype', models.CharField(db_column='pdfType', max_length=15)),
            ],
            options={
                'db_table': 'pdf_type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Request',
            fields=[
                ('requestid', models.CharField(db_column='requestId', max_length=36, primary_key=True, serialize=False)),
                ('datecreated', models.DateField(db_column='dateCreated')),
                ('periodicity', models.PositiveIntegerField(blank=True, null=True)),
                ('title', models.CharField(max_length=30)),
                ('requestdescription', models.CharField(blank=True, db_column='requestDescription', max_length=280, null=True)),
                ('expirationdate', models.DateField(blank=True, db_column='expirationDate', null=True)),
                ('done', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'request',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('reviewid', models.CharField(db_column='reviewId', max_length=36, primary_key=True, serialize=False)),
                ('reviewingid', models.CharField(db_column='reviewingId', max_length=36)),
                ('reviewedid', models.CharField(db_column='reviewedId', max_length=36)),
                ('reviewdescription', models.CharField(blank=True, db_column='reviewDescription', max_length=280, null=True)),
                ('rating', models.PositiveIntegerField(blank=True, null=True)),
                ('lastupdate', models.DateTimeField(blank=True, db_column='lastUpdate', null=True)),
            ],
            options={
                'db_table': 'review',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='SubCategory',
            fields=[
                ('subcategoryid', models.CharField(db_column='subCategoryId', max_length=36, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=30)),
                ('subcategorydescription', models.CharField(blank=True, db_column='subCategoryDescription', max_length=280, null=True)),
            ],
            options={
                'db_table': 'sub_category',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='UserEntity',
            fields=[
                ('userid', models.CharField(db_column='userId', max_length=36, primary_key=True, serialize=False)),
                ('username', models.CharField(max_length=20, unique=True)),
                ('userpassword', models.CharField(db_column='userPassword', max_length=256)),
                ('fullname', models.CharField(db_column='fullName', max_length=50)),
                ('email', models.CharField(max_length=50, unique=True)),
                ('activestatus', models.IntegerField(db_column='activeStatus')),
                ('lastaccess', models.DateField(db_column='lastAccess')),
                ('creationdate', models.DateField(db_column='creationDate')),
                ('lastupdate', models.DateTimeField(db_column='lastUpdate')),
            ],
            options={
                'db_table': 'user_entity',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='UserLog',
            fields=[
                ('logid', models.CharField(db_column='logId', max_length=36, primary_key=True, serialize=False)),
                ('ip', models.CharField(blank=True, max_length=15, null=True)),
                ('hostname', models.CharField(blank=True, db_column='hostName', max_length=20, null=True)),
                ('isp', models.CharField(blank=True, max_length=20, null=True)),
                ('district', models.CharField(blank=True, max_length=30, null=True)),
                ('city', models.CharField(blank=True, max_length=50, null=True)),
                ('zipcode', models.PositiveIntegerField(blank=True, db_column='zipCode', null=True)),
                ('lat', models.DecimalField(blank=True, decimal_places=6, max_digits=7, null=True)),
                ('lng', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True)),
                ('logdate', models.DateTimeField(blank=True, db_column='logDate', null=True)),
            ],
            options={
                'db_table': 'user_log',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='UserType',
            fields=[
                ('usertypeid', models.IntegerField(db_column='userTypeId', primary_key=True, serialize=False)),
                ('usertype', models.CharField(db_column='userType', max_length=9)),
            ],
            options={
                'db_table': 'user_type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AdCategory',
            fields=[
                ('adid', models.OneToOneField(db_column='adId', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='test_app.Ad')),
            ],
            options={
                'db_table': 'ad_category',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AddressProof',
            fields=[
                ('pdfid', models.OneToOneField(db_column='pdfId', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, related_name='+', serialize=False, to='test_app.Pdf')),
            ],
            options={
                'db_table': 'address_proof',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CredentialProof',
            fields=[
                ('pdfid', models.OneToOneField(db_column='pdfId', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, related_name='+', serialize=False, to='test_app.Pdf')),
            ],
            options={
                'db_table': 'credential_proof',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ExecutiveUser',
            fields=[
                ('userid', models.OneToOneField(db_column='userId', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, related_name='+', serialize=False, to='test_app.UserEntity')),
            ],
            options={
                'db_table': 'executive_user',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='HealthLog',
            fields=[
                ('patientid', models.OneToOneField(db_column='patientId', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='test_app.UserEntity')),
            ],
            options={
                'db_table': 'health_log',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='HealthLogNote',
            fields=[
                ('healthlognoteid', models.OneToOneField(db_column='healthLogNoteId', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, related_name='+', serialize=False, to='test_app.Note')),
            ],
            options={
                'db_table': 'health_log_note',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Image',
            fields=[
                ('userid', models.OneToOneField(db_column='userId', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='test_app.UserEntity')),
                ('title', models.CharField(blank=True, max_length=40, null=True)),
                ('pic', models.TextField()),
            ],
            options={
                'db_table': 'image',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='LogNote',
            fields=[
                ('lognoteid', models.OneToOneField(db_column='logNoteId', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, related_name='+', serialize=False, to='test_app.Note')),
            ],
            options={
                'db_table': 'log_note',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='NormalUser',
            fields=[
                ('userid', models.OneToOneField(db_column='userId', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, related_name='+', serialize=False, to='test_app.UserEntity')),
                ('userdescription', models.CharField(blank=True, db_column='userDescription', max_length=280, null=True)),
            ],
            options={
                'db_table': 'normal_user',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='PaymentProof',
            fields=[
                ('pdfid', models.OneToOneField(db_column='pdfId', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, related_name='+', serialize=False, to='test_app.Pdf')),
            ],
            options={
                'db_table': 'payment_proof',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='RequestCategory',
            fields=[
                ('requestid', models.OneToOneField(db_column='requestId', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='test_app.Request')),
            ],
            options={
                'db_table': 'request_category',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='SocialMedia',
            fields=[
                ('userid', models.OneToOneField(db_column='userId', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, related_name='+', serialize=False, to='test_app.UserEntity')),
                ('facebook', models.CharField(blank=True, max_length=50, null=True)),
                ('linkedin', models.CharField(blank=True, db_column='linkedIn', max_length=61, null=True)),
                ('instagram', models.CharField(blank=True, max_length=30, null=True)),
                ('reddit', models.CharField(blank=True, max_length=20, null=True)),
                ('skype', models.CharField(blank=True, max_length=32, null=True)),
                ('twitter', models.CharField(blank=True, max_length=15, null=True)),
                ('lastupdate', models.DateTimeField(blank=True, db_column='lastUpdate', null=True)),
            ],
            options={
                'db_table': 'social_media',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='UserNote',
            fields=[
                ('usernoteid', models.OneToOneField(db_column='userNoteId', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, related_name='+', serialize=False, to='test_app.Note')),
            ],
            options={
                'db_table': 'user_note',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AtRisk',
            fields=[
                ('userid', models.OneToOneField(db_column='userId', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='test_app.NormalUser')),
            ],
            options={
                'db_table': 'at_risk',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Helper',
            fields=[
                ('userid', models.OneToOneField(db_column='userId', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='test_app.NormalUser')),
            ],
            options={
                'db_table': 'helper',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Monitor',
            fields=[
                ('userid', models.OneToOneField(db_column='userId', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='test_app.ExecutiveUser')),
            ],
            options={
                'db_table': 'monitor',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='UserAdmin',
            fields=[
                ('userid', models.OneToOneField(db_column='userId', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='test_app.ExecutiveUser')),
            ],
            options={
                'db_table': 'user_admin',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AtRiskCategory',
            fields=[
                ('userid', models.OneToOneField(db_column='userId', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='test_app.AtRisk')),
            ],
            options={
                'db_table': 'at_risk_category',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AtRisksFavourite',
            fields=[
                ('atriskid', models.OneToOneField(db_column='atRiskId', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='test_app.AtRisk')),
                ('dateselected', models.DateField(blank=True, db_column='dateSelected', null=True)),
            ],
            options={
                'db_table': 'at_risks_favourite',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='HelperCategory',
            fields=[
                ('userid', models.OneToOneField(db_column='userId', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='test_app.Helper')),
            ],
            options={
                'db_table': 'helper_category',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='HelpersFavourite',
            fields=[
                ('helperid', models.OneToOneField(db_column='helperId', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='test_app.Helper')),
                ('dateselected', models.DateField(blank=True, db_column='dateSelected', null=True)),
            ],
            options={
                'db_table': 'helpers_favourite',
                'managed': False,
            },
        ),
    ]
